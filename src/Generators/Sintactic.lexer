package Generators;
import Principal.Token;
import static Principal.Token.*;


%%

%class SintacticLexer
%public
%type Token
%line
%column


DEFINICION        = "DEFINICION" | "DEFINICIONES" | "definicion" | "definiciones"


UNIVERSO          = "UNIVERSO" | "universo"
LLAVE_ABIERTA     = "{"
LLAVE_CERRADA     = "}"
COMA              = ","
IGUAL             = "="
COMILLA           = "\""
//COMILLAS           = "\""


LETRA_MINUSCULA     = [a-z] | "ñ" | "á" | "é" | "í" | "ó" | "ú"
LETRA_MAYUSCULA     = [A-Z] | "Ñ" | "Á" | "É" | "Í"| "Ó" | "Ú"
NUMERO              = 0 | [1-9][0-9]*
NOMBRE_CONJUNTO     = ( ( {LETRA_MINUSCULA} | {LETRA_MAYUSCULA} )+ { NUMERO } * )+
ELEMENTO_CONJUNTO = ( {LETRA_MINUSCULA}* |  {LETRA_MAYUSCULA}* | {NUMERO} * )+

OPERACION           = "OPERACION" | "OPERACIONES" | "operacion" | "operaciones"
PARENTESIS_ABIERTO  = "("
PARENTESIS_CERRADO  = ")"


UNION               = "&"
INTERSECCION        = "$"
DIFERENCIA          = "/"
PRODUCTO_CRUZ       = "*"
COMPLEMENTO         = "^c"

WHITE       = [\t]
SPACE       = " "* [\t]*
//NUEVA_LINEA = \r|\n|\r\n|\t|\f
NUEVA_LINEA = \r|\n|\r\n

//ERRORESS



//DEFINICIONES GLOBALES

ELEMENTO              = {SPACE} {COMILLA} {ELEMENTO_CONJUNTO} {COMILLA} {SPACE}
SEGUNDO_ELEMENTO      = {COMA} {ELEMENTO}


ELEMENTOS_CONJUNTO    = {SPACE} {IGUAL} {SPACE} {LLAVE_ABIERTA} ({ELEMENTO} {SEGUNDO_ELEMENTO}*)+ {SPACE} {LLAVE_CERRADA} {SPACE}
SIN_ELEMENTOS         = {SPACE} {IGUAL} {SPACE} {LLAVE_ABIERTA} {SPACE} {LLAVE_CERRADA} {SPACE}

CONJUNTO              = {SPACE} {NOMBRE_CONJUNTO} {ELEMENTOS_CONJUNTO}
CONJUNTO_VACIO        = {SPACE} {NOMBRE_CONJUNTO} {SIN_ELEMENTOS}
//CONJUNTO_VACIO =      {NOMBRE_CONJUNTO} {SPACE} {IGUAL} {SPACE} {LLAVE_ABIERTA} {SPACE} {LLAVE_CERRADA} {SPACE}
CONJUNTO_UNIVERSO     = {SPACE} {UNIVERSO} {ELEMENTOS_CONJUNTO}

CONJUNTO_COMPLEMENTO  = {SPACE} {NOMBRE_CONJUNTO} {SPACE} {COMPLEMENTO} {SPACE}
ID_CONJUNTO           = {SPACE} {NOMBRE_CONJUNTO} {SPACE} | {CONJUNTO_COMPLEMENTO}
OPERACION_SIMBOLO     = {SPACE} (  {UNION} | {INTERSECCION} | {DIFERENCIA} | {PRODUCTO_CRUZ} ) {SPACE}
OPERACION_BASICA      = {ID_CONJUNTO}  ( {OPERACION_SIMBOLO} {ID_CONJUNTO} )+
OPERACION_LLAVES      = {SPACE} {PARENTESIS_ABIERTO} {OPERACION_BASICA} {PARENTESIS_CERRADO}
//DOS_OPERACIONES =     {OPERACION_LLAVES}  ( ( ( {OPERACION_SIMBOLO} {ID_CONJUNTO} )*  {OPERACION_SIMBOLO} ) |  {OPERACION_SIMBOLO}  ){OPERACION_LLAVES}

OPERACION_CONJUNTO    =  {OPERACION_BASICA} | {OPERACION_LLAVES} | {CONJUNTO_COMPLEMENTO}

//--------------------------- ERRORES------------------

//--------------------------- DEFINICIONES ------------------
ELEMENTO_INVALIDO               = {SPACE} ( {LETRA_MINUSCULA}+ | {LETRA_MAYUSCULA}+ | {NUMERO} + ) {SPACE} //| {NUMERO}+ ({LETRA_MINUSCULA}* |  {LETRA_MAYUSCULA}*)*
SEGUNDO_ELEMENTO_INVALIDO       = {COMA} {ELEMENTO_INVALIDO}
INICIO_CONJUNTO                 = {ID_CONJUNTO} {IGUAL} {SPACE} {LLAVE_ABIERTA}


CONJUNTO_ELEMENTOS_ERROR        = {INICIO_CONJUNTO} ( {ELEMENTO_INVALIDO} {SEGUNDO_ELEMENTO_INVALIDO}* )+ {COMA}* {SPACE} {LLAVE_CERRADA} {SPACE}
CONJUNTO_FALTA_ELEMENTO_ERROR   = {INICIO_CONJUNTO} ({ELEMENTO} {SEGUNDO_ELEMENTO}*)+ {COMA}*  {SPACE} | {INICIO_CONJUNTO} {SPACE}

//--------------------------- OPERACIONES ------------------
OPERACION_CONJUNTO_FALTANTE      = {ID_CONJUNTO}? ( {OPERACION_SIMBOLO} {ID_CONJUNTO} )+ {OPERACION_SIMBOLO}?

%{
   public String lexeme;
   public int line_count;
   public int column_count;
%}

%%

//Definiciones a retornar

{DEFINICION}                {line_count=yyline;column_count=yycolumn; return DEFINICION;}
{OPERACION}                 {line_count=yyline;column_count=yycolumn; return OPERACION;}

{CONJUNTO_UNIVERSO}         {line_count=yyline;column_count=yycolumn; return CONJUNTO_UNIVERSO;}
{CONJUNTO_VACIO}            {line_count=yyline;column_count=yycolumn; return CONJUNTO_VACIO;}
{CONJUNTO}                  {line_count=yyline;column_count=yycolumn; return CONJUNTO;}
{OPERACION_CONJUNTO}        {line_count=yyline;column_count=yycolumn; return OPERACION_CONJUNTO;}


//Definiciones por defecto
{NUEVA_LINEA}               {line_count=yyline;column_count=yycolumn; return NUEVA_LINEA;}
{WHITE}                     {/*Ignore*/}



//ERRORES

{CONJUNTO_ELEMENTOS_ERROR}                {line_count=yyline;column_count=yycolumn; return CONJUNTO_ELEMENTOS_ERROR;}
{CONJUNTO_FALTA_ELEMENTO_ERROR}           {line_count=yyline;column_count=yycolumn; return CONJUNTO_FALTA_ELEMENTO_ERROR;}
{OPERACION_CONJUNTO_FALTANTE}             {line_count=yyline;column_count=yycolumn; return OPERACION_CONJUNTO_FALTANTE;}

.                                         {line_count=yyline;column_count=yycolumn; return ERROR;}
